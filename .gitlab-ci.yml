# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.
stages:
  - build
  - deploy
  
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - echo "Running on branch '$CI_COMMIT_BRANCH' with slug '$CI_COMMIT_REF_SLUG'"
    - REPO_PATH="$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG"
    - docker build -t "$REPO_PATH:latest" .
    - docker push "$REPO_PATH:latest"
    
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
    - if: $CI_COMMIT_BRANCH == "staging"

compose-deploy:
  image: docker:latest
  stage: deploy
  variables:
    DEPLOY_CURL_COMMAND: 'curl -X POST http://stg-coding-stones.zendev.se:6666/RebuildDockerCompose'
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  script:
    - echo "Deploying to staging server..."
    - 'eval "$DEPLOY_CURL_COMMAND"'
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
